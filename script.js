/*
  Script principal pour l'application de contr√¥le ICC.
  Ce fichier g√®re l'ensemble des interactions et la logique de l'application.

  Fonctionnement g√©n√©ral :
    - √Ä l'initialisation, un √©cran d'accueil propose de commencer la
      v√©rification hebdomadaire.
    - Une fois d√©marr√©e, l'application affiche une liste des √©l√©ments √†
      v√©rifier. Chaque √©l√©ment peut √™tre ouvert pour lire les instructions
      d√©taill√©es et saisir un commentaire, et √™tre marqu√© conforme,
      avertissement ou non conforme.
    - Une barre de progression indique l'avancement du contr√¥le.
    - √Ä la fin, un r√©capitulatif pr√©sente les r√©sultats, avec le score et
      la liste des √©l√©ments manquants ou en anomalie.

  Pour personnaliser la liste des √©l√©ments ou les instructions, modifiez
  simplement la constante `checkItems` ci-dessous.
*/

// ======== Donn√©es et √©tat global ========

// Liste des boutiques disponibles. Permet de choisir pour quel magasin effectuer l'audit.
const stores = ['Disney Store', 'Disney & CO', 'Emporium'];

// Variable globale pour stocker la boutique s√©lectionn√©e
let selectedStore = '';

// Indique si l'historique a d√©j√† √©t√© sauvegard√© lors de la session courante
let hasSavedHistory = false;

// Liste des √©l√©ments √† v√©rifier. Chaque objet contient :
// id          : identifiant unique (ne pas modifier lors de changements d'ordre)
// title       : titre affich√© sur la carte
// icon        : emoji repr√©sentatif
// description : explications sur ce qu'il faut v√©rifier
const checkItems = [
  {
    id: 'deposit',
    title: 'Rapports d√©p√¥t',
    icon: 'üìÑ',
    description:
      "V√©rifiez que les rapports de d√©p√¥t sont compl√©t√©s chaque jour et sign√©s par la personne en charge. Assurez-vous que les totaux correspondent au fonds de caisse et qu'ils sont archiv√©s correctement.",
  },
  {
    id: 'fdc',
    title: 'Suivi des FDC',
    icon: 'üßæ',
    description:
      "Examinez le formulaire de suivi des fonds de caisse (FDC). Les totaux doivent √™tre exacts, les signatures pr√©sentes et les justificatifs attach√©s.",
  },
  {
    id: 'coffre',
    title: 'Suivi du coffre',
    icon: 'üîê',
    description:
      "Contr√¥lez le formulaire du coffre¬†: chaque entr√©e et sortie doit √™tre enregistr√©e. V√©rifiez les signatures et la coh√©rence des montants.",
  },
  {
    id: 'cles',
    title: 'Suivi des cl√©s',
    icon: 'üîë',
    description:
      "V√©rifiez que la liste des cl√©s d√©tenues est √† jour. Notez qui d√©tient quelle cl√© et assurez-vous que les mouvements sont consign√©s.",
  },
  {
    id: 'prix',
    title: 'Changement de prix',
    icon: 'üí∞',
    description:
      "Assurez-vous que tous les changements de prix sont document√©s et autoris√©s. Chaque modification doit √™tre sign√©e et justifi√©e.",
  },
  {
    id: 'shopping',
    title: 'Shopping & Pick-up',
    icon: 'üõí',
    description:
      "Contr√¥lez que les formulaires de shopping et pick-up sont correctement remplis. Les justificatifs (tickets, factures) doivent √™tre attach√©s.",
  },
  {
    id: 'inventaireCles',
    title: 'Inventaire des cl√©s',
    icon: 'üóùÔ∏è',
    description:
      "V√©rifiez que l'inventaire des cl√©s est actualis√© et que toutes les cl√©s sont pr√©sentes. Consignez toute anomalie.",
  },
  {
    id: 'auditCaisse',
    title: 'Audits de caisse',
    icon: 'üßÆ',
    description:
      "Contr√¥lez les audits de caisse hebdomadaires¬†: comparez les montants d√©pos√©s avec les ventes enregistr√©es et identifiez toute diff√©rence.",
  },
  {
    id: 'materiel',
    title: 'Conformit√© du mat√©riel',
    icon: 'üñ•Ô∏è',
    description:
      "Contr√¥lez que tout le mat√©riel est conforme (scanners, terminaux, etc.). V√©rifiez l'√©tiquetage, l'√©tat g√©n√©ral et signalez toute d√©faillance.",
  },
];

// Statut possible pour chaque √©l√©ment
const STATUS = {
  TODO: 'todo',
  DONE: 'done',
  ERROR: 'error',
};

// √âtats de l'application (sc√®ne affich√©e)
const APP_STATE = {
  PRECHECK: 'precheck',
  START: 'start',
  CHECKLIST: 'checklist',
  SUMMARY: 'summary',
};

// Stockage des r√©ponses de l'utilisateur. La cl√© est l'id de l'item,
// la valeur contient le statut et les commentaires.
let userResponses = {};
// √âtat actuel de l'application
let currentAppState = APP_STATE.START;

// Informations saisies par l'utilisateur avant le contr√¥le
let personName = '';
let verificationDate = '';

// Variables pour la p√©riode de v√©rification calcul√©e (dimanche dernier -> samedi)
let periodStart = '';
let periodEnd = '';

// ================== Gestion de l'historique ==================

/*
  Charge l'historique depuis le localStorage. Les entr√©es sont
  enregistr√©es sous forme de tableau d'objets contenant¬†:
    - store       : nom de la boutique
    - name        : pr√©nom de la personne ayant r√©alis√© le contr√¥le
    - date        : date de v√©rification (format AAAA-MM-JJ)
    - periodStart : date de d√©but de la p√©riode (format JJ/MM/AAAA)
    - periodEnd   : date de fin de la p√©riode (format JJ/MM/AAAA)

  Retourne un tableau vide si aucun historique n'est trouv√©.
*/
function loadHistory() {
  try {
    const data = localStorage.getItem('iccHistory');
    return data ? JSON.parse(data) : [];
  } catch (e) {
    // En cas d'erreur (JSON invalide), r√©initialise l'historique
    console.error('Erreur de chargement de l\'historique¬†:', e);
    return [];
  }
}

/*
  Retourne l'entr√©e la plus r√©cente pour une boutique donn√©e.
  On compare les dates au format AAAA-MM-JJ pour d√©terminer la plus grande.
  Si aucune entr√©e n'existe, retourne null.
*/
function findLatestForStore(store) {
  if (!store) return null;
  const history = loadHistory().filter((h) => h.store === store);
  if (history.length === 0) return null;
  // Trouve l'entr√©e avec la date la plus r√©cente. Les dates sont en format ISO AAAA-MM-JJ.
  return history.reduce((latest, entry) => {
    if (!latest) return entry;
    return entry.date > latest.date ? entry : latest;
  }, null);
}

/*
  Recherche une entr√©e d'historique correspondant √† une boutique et une date donn√©es.
  Retourne l'objet trouv√© ou null si aucune correspondance.
*/
function findEntry(store, date) {
  if (!store || !date) return null;
  const history = loadHistory();
  return history.find((h) => h.store === store && h.date === date) || null;
}

/*
  Affiche les r√©sultats d'une entr√©e historique existante sans permettre de modifier la checklist.
  Cette fonction recharge les variables globales √† partir de l'entr√©e et appelle renderSummary().
*/
function viewExistingEntry(entry) {
  if (!entry) return;
  // Restaure les informations de l'entr√©e
  personName = entry.name;
  verificationDate = entry.date;
  selectedStore = entry.store;
  periodStart = entry.periodStart;
  periodEnd = entry.periodEnd;
  // Restaure les r√©ponses de l'utilisateur √† partir de l'entr√©e
  userResponses = entry.results || {};
  // √âvite d'enregistrer √† nouveau cette entr√©e √† l'enregistrement du r√©sum√©
  hasSavedHistory = true;
  // Affiche le r√©sum√© directement
  renderSummary();
}

/*
  Sauvegarde une entr√©e d'historique dans le localStorage. L'entr√©e
  doit contenir store, name, date, periodStart, periodEnd. Les
  entr√©es existantes sont conserv√©es. Enregistrements multiples
  peuvent coexister pour un m√™me magasin.
*/
function saveHistoryEntry(entry) {
  const history = loadHistory();
  history.push(entry);
  try {
    localStorage.setItem('iccHistory', JSON.stringify(history));
  } catch (e) {
    console.error('Erreur d\'enregistrement de l\'historique¬†:', e);
  }
}

/*
  Cr√©e un √©l√©ment DOM affichant l'historique pour la boutique
  actuellement s√©lectionn√©e. Affiche jusqu'√† cinq entr√©es les plus
  r√©centes (ordre du tableau). Si aucune donn√©e n'est trouv√©e pour
  cette boutique, retourne null.
*/
function renderHistory() {
  if (!selectedStore) return null;
  const history = loadHistory().filter((h) => h.store === selectedStore);
  if (history.length === 0) return null;
  // Inverse pour afficher les plus r√©centes en premier
  history.reverse();
  // Limite √† 5 entr√©es
  const toShow = history.slice(0, 5);
  const wrapper = document.createElement('div');
  wrapper.className = 'card';
  wrapper.style.flexDirection = 'column';
  wrapper.style.marginTop = '1rem';
  const title = document.createElement('h3');
  title.textContent = 'Historique ICC';
  title.style.marginBottom = '0.5rem';
  wrapper.appendChild(title);
  toShow.forEach((entry) => {
    const p = document.createElement('p');
    p.style.fontSize = '0.9rem';
    p.style.marginBottom = '0.3rem';
    p.innerHTML =
      `<strong>Checklist effectu√©e par ${entry.name}</strong> le ${entry.date} (P√©riode du ${entry.periodStart} au ${entry.periodEnd})`;
    wrapper.appendChild(p);
  });
  return wrapper;
}

// ------------------ Fonctions pour la p√©riode ------------------ //
// Formate une date en JJ/MM/AAAA pour l'affichage
function formatDateFR(date) {
  return date.toLocaleDateString('fr-FR');
}

// Calcule la p√©riode de v√©rification (du dimanche pr√©c√©dent au samedi)
// √† partir d'une date de contr√¥le (suppos√©e un dimanche).
function computeWeekPeriod(dateString) {
  if (!dateString) return ['', ''];
  // Parse la date saisie en local (ajout de T00:00:00 pour √©viter le d√©calage UTC)
  const date = new Date(`${dateString}T00:00:00`);
  // Cr√©e des dates distinctes pour √©viter de modifier l'original
  const start = new Date(date);
  start.setDate(start.getDate() - 7);
  const end = new Date(date);
  end.setDate(end.getDate() - 1);
  return [formatDateFR(start), formatDateFR(end)];
}

const appContainer = document.getElementById('app');

// ------------------ Fonctions utilitaires ------------------ //

// Calcule la progression en pourcentage (0 √† 100)
function computeProgress() {
  const total = checkItems.length;
  let completed = 0;
  checkItems.forEach((item) => {
    if (userResponses[item.id] && userResponses[item.id].status !== STATUS.TODO) {
      completed += 1;
    }
  });
  return Math.round((completed / total) * 100);
}

// Retourne la classe de statut pour un item donn√©
function getStatusClass(itemId) {
  const response = userResponses[itemId];
  if (!response) return STATUS.TODO;
  return response.status;
}

// Met √† jour la barre de progression et son libell√©
function updateProgressCircle() {
  const progress = computeProgress();
  const circle = document.querySelector('.progress-circle');
  if (circle) {
    circle.style.background = `conic-gradient(var(--secondary-color) 0% ${progress}%, #e0e7ff ${progress}% 100%)`;
    const span = circle.querySelector('span');
    if (span) {
      span.textContent = `${progress}%`;
    }
  }
}

// Ouvre une modale avec les d√©tails et un formulaire pour l'item s√©lectionn√©
function openModal(itemId) {
  const item = checkItems.find((i) => i.id === itemId);
  if (!item) return;
  // Cr√©e l'overlay de modale
  const overlay = document.createElement('div');
  overlay.className = 'modal-overlay';
  // Modale elle-m√™me
  const modal = document.createElement('div');
  modal.className = 'modal';
  // En-t√™te
  const header = document.createElement('div');
  header.className = 'modal-header';
  const h2 = document.createElement('h2');
  h2.textContent = item.title;
  const closeBtn = document.createElement('span');
  closeBtn.className = 'modal-close';
  closeBtn.innerHTML = '&times;';
  closeBtn.addEventListener('click', () => {
    overlay.classList.remove('active');
    setTimeout(() => overlay.remove(), 200);
  });
  header.appendChild(h2);
  header.appendChild(closeBtn);
  // Contenu
  const content = document.createElement('div');
  content.className = 'modal-content';
  const p = document.createElement('p');
  p.textContent = item.description;
  content.appendChild(p);
  // S√©lecteur de statut
  const statusFieldset = document.createElement('fieldset');
  const legend = document.createElement('legend');
  legend.textContent = 'Statut :';
  statusFieldset.appendChild(legend);
  const options = [
    { value: STATUS.DONE, label: 'Conforme' },
    { value: STATUS.ERROR, label: 'Non conforme' },
  ];
  options.forEach(({ value, label }) => {
    const radio = document.createElement('input');
    radio.type = 'radio';
    // on inclut l'id de l'item pour √©viter les doublons dans le DOM
    const radioId = `status-${item.id}-${value}`;
    radio.name = 'status';
    radio.id = radioId;
    radio.value = value;
    // Pr√©-s√©lectionne l'option existante si disponible
    if (userResponses[item.id] && userResponses[item.id].status === value) {
      radio.checked = true;
    }
    const radioLabel = document.createElement('label');
    radioLabel.htmlFor = radioId;
    radioLabel.textContent = label;
    const wrapper = document.createElement('div');
    wrapper.style.display = 'flex';
    wrapper.style.alignItems = 'center';
    wrapper.style.gap = '0.5rem';
    wrapper.appendChild(radio);
    wrapper.appendChild(radioLabel);
    statusFieldset.appendChild(wrapper);
  });
  content.appendChild(statusFieldset);
  // Zone de commentaires
  const commentLabel = document.createElement('label');
  commentLabel.textContent = 'Commentaire (optionnel) :';
  const textarea = document.createElement('textarea');
  textarea.placeholder = 'Vos observations...';
  if (userResponses[item.id] && userResponses[item.id].comment) {
    textarea.value = userResponses[item.id].comment;
  }
  content.appendChild(commentLabel);
  content.appendChild(textarea);
  // Actions
  const actions = document.createElement('div');
  actions.className = 'modal-actions';
  const cancelBtn = document.createElement('button');
  cancelBtn.className = 'cancel-btn';
  cancelBtn.textContent = 'Annuler';
  cancelBtn.addEventListener('click', () => {
    overlay.classList.remove('active');
    setTimeout(() => overlay.remove(), 200);
  });
  const saveBtn = document.createElement('button');
  saveBtn.className = 'save-btn';
  saveBtn.textContent = 'Enregistrer';
  saveBtn.addEventListener('click', () => {
    // R√©cup√®re la valeur du radio s√©lectionn√©
    const selected = statusFieldset.querySelector('input[name="status"]:checked');
    if (selected) {
      // Mettez √† jour le userResponses
      userResponses[item.id] = {
        status: selected.value,
        comment: textarea.value.trim(),
      };
      // Mise √† jour de la progression et du rendu
      renderChecklist();
    }
    overlay.classList.remove('active');
    setTimeout(() => overlay.remove(), 200);
  });
  actions.appendChild(cancelBtn);
  actions.appendChild(saveBtn);
  // Assemblage
  modal.appendChild(header);
  modal.appendChild(content);
  modal.appendChild(actions);
  overlay.appendChild(modal);
  document.body.appendChild(overlay);
  // Affiche la modale
  setTimeout(() => overlay.classList.add('active'), 10);
}

// Affiche l'√©cran d'accueil
function renderStart() {
  currentAppState = APP_STATE.START;
  appContainer.innerHTML = '';
  const introCard = document.createElement('div');
  introCard.className = 'card';
  introCard.style.flexDirection = 'column';
  introCard.style.alignItems = 'center';
  introCard.style.textAlign = 'center';
  const introTitle = document.createElement('h2');
  introTitle.textContent = 'Checklist ICC';
  const introText = document.createElement('p');
  introText.style.margin = '1rem 0';
  introText.style.fontSize = '1rem';
  // Message dynamique avec nom, date et p√©riode si renseign√©s
  let message = 'Pr√©parez-vous √† v√©rifier vos documents et proc√©dures pour cette semaine.';
  introText.textContent = '';
  // Si un nom a √©t√© saisi, on personnalise le message et calcule la p√©riode
  if (personName) {
    // Calcule la p√©riode de v√©rification √† partir de la date saisie
    if (verificationDate) {
      [periodStart, periodEnd] = computeWeekPeriod(verificationDate);
    }
    // Construit le message personnalis√© incluant la boutique
    if (selectedStore) {
      message = `Bonjour ${personName}, commencez votre v√©rification pour ${selectedStore}`;
    } else {
      message = `Bonjour ${personName}, commencez votre v√©rification`;
    }
    introText.textContent = message;
  } else {
    // Aucun pr√©nom : message g√©n√©rique
    introText.textContent = message;
  }
  const startBtn = document.createElement('button');
  startBtn.className = 'primary-button';
  startBtn.textContent = 'D√©marrer la checklist';
  startBtn.addEventListener('click', () => {
    renderChecklist();
  });
  // Ajout des √©l√©ments √† la carte dans l'ordre souhait√©
  introCard.appendChild(introTitle);
  introCard.appendChild(introText);
  // Si la p√©riode est disponible, ajoute une ligne apr√®s le texte
  if (personName && periodStart && periodEnd) {
    const periodInfo = document.createElement('p');
    periodInfo.style.marginTop = '0.3rem';
    periodInfo.style.fontSize = '0.9rem';
    periodInfo.style.color = 'var(--muted-color)';
    periodInfo.textContent = `P√©riode √† couvrir¬†: du ${periodStart} au ${periodEnd}`;
    introCard.appendChild(periodInfo);
  }
  // Affiche l'historique pour la boutique s√©lectionn√©e si disponible
  const historyElem = renderHistory();
  if (historyElem) {
    introCard.appendChild(historyElem);
  }
  introCard.appendChild(startBtn);
  appContainer.appendChild(introCard);
}

// Affiche le formulaire initial pour saisir le pr√©nom et la date
function renderPreCheck() {
  currentAppState = APP_STATE.PRECHECK;
  appContainer.innerHTML = '';
  const formCard = document.createElement('div');
  formCard.className = 'card';
  formCard.style.flexDirection = 'column';
  formCard.style.alignItems = 'stretch';
  formCard.style.maxWidth = '500px';
  formCard.style.margin = '0 auto';
  // Titre
  const title = document.createElement('h2');
  title.textContent = 'Informations avant la v√©rification';
  title.style.marginBottom = '1rem';
  // Champ boutique (menu d√©roulant)
  const storeLabel = document.createElement('label');
  storeLabel.textContent = 'Boutique :';
  storeLabel.style.marginTop = '0.5rem';
  const storeSelect = document.createElement('select');
  storeSelect.style.marginTop = '0.25rem';
  storeSelect.style.padding = '0.6rem';
  storeSelect.style.borderRadius = 'var(--border-radius)';
  storeSelect.style.border = '1px solid #ccc';
  // Option vide par d√©faut
  const defaultOption = document.createElement('option');
  defaultOption.value = '';
  defaultOption.textContent = 'Choisissez une boutique';
  storeSelect.appendChild(defaultOption);
  stores.forEach((store) => {
    const opt = document.createElement('option');
    opt.value = store;
    opt.textContent = store;
    storeSelect.appendChild(opt);
  });

  // √âl√©ment pour afficher la derni√®re v√©rification de la boutique
  const latestInfo = document.createElement('p');
  latestInfo.style.marginTop = '0.4rem';
  latestInfo.style.fontSize = '0.85rem';
  latestInfo.style.color = 'var(--muted-color)';
  latestInfo.style.display = 'none';

  // Bouton pour consulter les r√©sultats existants
  const viewResultsBtn = document.createElement('button');
  viewResultsBtn.className = 'primary-button';
  viewResultsBtn.textContent = 'Consulter les r√©sultats';
  viewResultsBtn.style.marginTop = '0.5rem';
  viewResultsBtn.style.display = 'none';
  // Champ pr√©nom
  const nameLabel = document.createElement('label');
  nameLabel.textContent = 'Pr√©nom :';
  nameLabel.style.marginTop = '0.8rem';
  const nameInput = document.createElement('input');
  nameInput.type = 'text';
  nameInput.placeholder = 'Votre pr√©nom';
  nameInput.style.marginTop = '0.25rem';
  nameInput.style.padding = '0.6rem';
  nameInput.style.borderRadius = 'var(--border-radius)';
  nameInput.style.border = '1px solid #ccc';
  // Champ date
  const dateLabel = document.createElement('label');
  dateLabel.textContent = 'Date de v√©rification :';
  dateLabel.style.marginTop = '0.8rem';
  const dateInput = document.createElement('input');
  dateInput.type = 'date';
  dateInput.style.marginTop = '0.25rem';
  dateInput.style.padding = '0.6rem';
  dateInput.style.borderRadius = 'var(--border-radius)';
  dateInput.style.border = '1px solid #ccc';
  // Bouton continuer
  const continueBtn = document.createElement('button');
  continueBtn.className = 'primary-button';
  continueBtn.textContent = 'Commencer la checklist';
  continueBtn.style.marginTop = '1.5rem';
  continueBtn.disabled = true;
  continueBtn.addEventListener('click', () => {
    personName = nameInput.value.trim();
    verificationDate = dateInput.value;
    selectedStore = storeSelect.value;
    // R√©initialise le flag de sauvegarde d'historique pour cette session
    hasSavedHistory = false;
    renderStart();
  });
  // Activer le bouton si les trois champs sont remplis
  const checkFormValidity = () => {
    // V√©rifie si une entr√©e existe d√©j√† pour cette boutique et cette date
    const duplicate = storeSelect.value && dateInput.value ? findEntry(storeSelect.value, dateInput.value) : null;
    // Si c'est un doublon, d√©sactive le bouton continuer et affiche le bouton consulter
    if (duplicate) {
      continueBtn.disabled = true;
      viewResultsBtn.style.display = 'inline-block';
      latestInfo.style.display = 'block';
      // D√©finit le texte pour la derni√®re v√©rification si ce n'est pas d√©j√† fait
      const latest = findLatestForStore(storeSelect.value);
      if (latest) {
        latestInfo.textContent = `Derni√®re v√©rification le ${latest.date} par ${latest.name} (P√©riode couverte du ${latest.periodStart} au ${latest.periodEnd})`;
      }
      // Affecte l'action au bouton consulter
      viewResultsBtn.onclick = () => viewExistingEntry(duplicate);
    } else {
      // Pas de doublon¬†: masque le bouton consulter
      viewResultsBtn.style.display = 'none';
      // Met √† jour la derni√®re v√©rification (affich√©e si une boutique est s√©lectionn√©e)
      if (storeSelect.value) {
        const latest = findLatestForStore(storeSelect.value);
        if (latest) {
          latestInfo.style.display = 'block';
          latestInfo.textContent = `Derni√®re v√©rification le ${latest.date} par ${latest.name} (P√©riode couverte du ${latest.periodStart} au ${latest.periodEnd})`;
        } else {
          latestInfo.style.display = 'block';
          latestInfo.textContent = 'Aucune v√©rification pr√©c√©dente.';
        }
      } else {
        latestInfo.style.display = 'none';
      }
      // Active ou d√©sactive le bouton suivant selon les champs remplis
      continueBtn.disabled =
        nameInput.value.trim() === '' || dateInput.value === '' || storeSelect.value === '';
    }
  };
  nameInput.addEventListener('input', checkFormValidity);
  dateInput.addEventListener('input', checkFormValidity);
  storeSelect.addEventListener('change', checkFormValidity);
  // Assemblage
  formCard.appendChild(title);
  formCard.appendChild(storeLabel);
  formCard.appendChild(storeSelect);
  formCard.appendChild(latestInfo);
  formCard.appendChild(viewResultsBtn);
  formCard.appendChild(nameLabel);
  formCard.appendChild(nameInput);
  formCard.appendChild(dateLabel);
  formCard.appendChild(dateInput);
  formCard.appendChild(continueBtn);
  appContainer.appendChild(formCard);

  // Mise √† jour initiale de la ligne de derni√®re v√©rification
  // Cela permet d'afficher la derni√®re entr√©e si une boutique est pr√©-s√©lectionn√©e (cas improbable)
  checkFormValidity();
}

// Affiche la liste des √©l√©ments √† v√©rifier
function renderChecklist() {
  currentAppState = APP_STATE.CHECKLIST;
  appContainer.innerHTML = '';
  // Progression circulaire
  const progressContainer = document.createElement('div');
  progressContainer.className = 'progress-container';
  const progressCircle = document.createElement('div');
  progressCircle.className = 'progress-circle';
  const progressNumber = document.createElement('span');
  progressNumber.textContent = '0%';
  progressCircle.appendChild(progressNumber);
  progressContainer.appendChild(progressCircle);
  appContainer.appendChild(progressContainer);
  // Liste des items
  checkItems.forEach((item) => {
    const card = document.createElement('div');
    card.className = 'card';
    // Classe de statut
    const statusClass = getStatusClass(item.id);
    // Applique √©galement la classe de statut √† la carte pour un style conditionnel (bordure color√©e)
    card.classList.add(statusClass);
    // Ic√¥ne + titre
    const info = document.createElement('div');
    info.className = 'info';
    const iconSpan = document.createElement('span');
    iconSpan.className = 'icon';
    iconSpan.textContent = item.icon;
    const titleSpan = document.createElement('span');
    titleSpan.className = 'title';
    titleSpan.textContent = item.title;
    info.appendChild(iconSpan);
    info.appendChild(titleSpan);
    // Statut
    const statusSpan = document.createElement('span');
    statusSpan.className = `status ${statusClass}`;
    statusSpan.textContent =
      statusClass === STATUS.TODO
        ? '√Ä faire'
        : statusClass === STATUS.DONE
        ? 'OK'
        : 'Non conf.';
    // On attache tout
    card.appendChild(info);
    card.appendChild(statusSpan);
    card.addEventListener('click', () => {
      openModal(item.id);
    });
    appContainer.appendChild(card);
  });
  // Bouton de revue finale
  const allCompleted = computeProgress() === 100;
  const finalBtn = document.createElement('button');
  finalBtn.className = 'primary-button';
  finalBtn.textContent = 'Voir le r√©sultat';
  finalBtn.disabled = !allCompleted;
  finalBtn.style.marginTop = '1.5rem';
  finalBtn.addEventListener('click', () => {
    renderSummary();
  });
  appContainer.appendChild(finalBtn);
  // Met √† jour le cercle de progression
  updateProgressCircle();
}

// Affiche la page de r√©sum√© final
function renderSummary() {
  currentAppState = APP_STATE.SUMMARY;
  appContainer.innerHTML = '';
  // Sauvegarde l'entr√©e d'historique si ce n'est pas d√©j√† fait
  if (!hasSavedHistory && personName && verificationDate && selectedStore) {
    // Appelle le calcul de p√©riode si elle n'a pas √©t√© d√©finie (s√©curit√©)
    if (!periodStart || !periodEnd) {
      [periodStart, periodEnd] = computeWeekPeriod(verificationDate);
    }
    saveHistoryEntry({
      store: selectedStore,
      name: personName,
      date: verificationDate,
      periodStart,
      periodEnd,
      // Conserve √©galement les r√©sultats d√©taill√©s pour consultation ult√©rieure
      results: JSON.parse(JSON.stringify(userResponses)),
    });
    hasSavedHistory = true;
  }
  // Titre
  const title = document.createElement('h2');
  title.textContent = 'R√©sultats de la v√©rification';
  appContainer.appendChild(title);
  // Sous-titre avec pr√©nom et date
  if (personName) {
    const subtitle = document.createElement('p');
    subtitle.style.marginBottom = '0.5rem';
    subtitle.style.color = 'var(--muted-color)';
    // Inclut √©galement la boutique s√©lectionn√©e
    let subtitleText = `V√©rification effectu√©e par ${personName}`;
    if (selectedStore) subtitleText += ` pour ${selectedStore}`;
    if (verificationDate) subtitleText += ` le ${verificationDate}`;
    subtitle.textContent = subtitleText;
    appContainer.appendChild(subtitle);
  }
  // P√©riode de v√©rification si disponible
  if (periodStart && periodEnd) {
    const periodInfo = document.createElement('p');
    periodInfo.style.marginBottom = '0.5rem';
    periodInfo.style.color = 'var(--muted-color)';
    periodInfo.textContent = `P√©riode v√©rifi√©e¬†: du ${periodStart} au ${periodEnd}`;
    appContainer.appendChild(periodInfo);
  }
  // Progression: afficher "Checklist compl√©t√©e" si 100 %, sinon le pourcentage
  const progress = computeProgress();
  const progressText = document.createElement('p');
  progressText.style.fontSize = '1.2rem';
  progressText.style.margin = '0.5rem 0 1rem';
  if (progress === 100) {
    progressText.innerHTML = '<strong>Checklist compl√©t√©e</strong>';
  } else {
    progressText.innerHTML = `<strong>Checklist compl√©t√©e √† ${progress}%</strong>`;
  }
  appContainer.appendChild(progressText);
  // Affiche un message global selon la pr√©sence d'erreurs
  const hasError = checkItems.some((item) => userResponses[item.id] && userResponses[item.id].status === STATUS.ERROR);
  const overallMessage = document.createElement('p');
  overallMessage.style.fontSize = '1.1rem';
  overallMessage.style.marginBottom = '1rem';
  if (!hasError) {
    overallMessage.innerHTML = '<strong>Tout est OK¬†! Aucun manquement d√©tect√©.</strong>';
    overallMessage.style.color = 'var(--accent-color)';
  } else {
    overallMessage.innerHTML = '<strong>Erreurs ou manquements d√©tect√©s¬†:</strong>';
    overallMessage.style.color = 'var(--error-color)';
  }
  appContainer.appendChild(overallMessage);
  // Liste des d√©tails
  checkItems.forEach((item) => {
    const response = userResponses[item.id];
    const wrapper = document.createElement('div');
    wrapper.className = 'card';
    wrapper.style.flexDirection = 'column';
    wrapper.style.cursor = 'default';
    // Titre + statut
    const row = document.createElement('div');
    row.style.display = 'flex';
    row.style.justifyContent = 'space-between';
    row.style.width = '100%';
    const rowLeft = document.createElement('div');
    rowLeft.className = 'info';
    const iconSpan = document.createElement('span');
    iconSpan.className = 'icon';
    iconSpan.textContent = item.icon;
    const titleSpan = document.createElement('span');
    titleSpan.className = 'title';
    titleSpan.textContent = item.title;
    rowLeft.appendChild(iconSpan);
    rowLeft.appendChild(titleSpan);
    const statusSpan = document.createElement('span');
    const statusClass = response ? response.status : STATUS.TODO;
    statusSpan.className = `status ${statusClass}`;
    // Affiche des libell√©s clairs selon le statut (pas d'avertissement)
    statusSpan.textContent =
      statusClass === STATUS.DONE
        ? 'OK'
        : statusClass === STATUS.ERROR
        ? 'Non conf.'
        : '√Ä faire';
    row.appendChild(rowLeft);
    row.appendChild(statusSpan);
    wrapper.appendChild(row);
    // Commentaire s'il existe
    if (response && response.comment) {
      const comment = document.createElement('p');
      comment.style.marginTop = '0.5rem';
      comment.style.fontSize = '0.9rem';
      comment.style.color = varColor(statusClass);
      comment.textContent = `Commentaire : ${response.comment}`;
      wrapper.appendChild(comment);
    }
    appContainer.appendChild(wrapper);
  });
  // Bouton recommencer
  const restartBtn = document.createElement('button');
  restartBtn.className = 'primary-button';
  restartBtn.textContent = 'Refaire une v√©rification';
  restartBtn.style.marginTop = '1.5rem';
  restartBtn.addEventListener('click', () => {
    userResponses = {};
    renderPreCheck();
  });
  appContainer.appendChild(restartBtn);

  // Bouton pour envoyer les r√©sultats par mail
  const emailBtn = document.createElement('button');
  emailBtn.className = 'primary-button';
  emailBtn.textContent = 'Envoyer les r√©sultats par mail';
  emailBtn.style.marginTop = '0.75rem';
  emailBtn.addEventListener('click', () => {
    sendResultsByEmail();
  });
  appContainer.appendChild(emailBtn);
}

// Fonction utilitaire pour donner une couleur √† un commentaire selon le statut
function varColor(status) {
  switch (status) {
    case STATUS.DONE:
      return getComputedStyle(document.documentElement).getPropertyValue('--accent-color');
    case STATUS.ERROR:
      return getComputedStyle(document.documentElement).getPropertyValue('--error-color');
    default:
      return getComputedStyle(document.documentElement).getPropertyValue('--muted-color');
  }
}

// G√©n√®re un lien mailto avec les r√©sultats et ouvre le client de messagerie
function sendResultsByEmail() {
  const progress = computeProgress();
  const completeText = progress === 100 ? 'Checklist compl√©t√©e' : `Checklist compl√©t√©e √† ${progress}%`;
  // Sujet inclut la boutique si renseign√©e
  let subject = 'R√©sultats checklist ICC';
  if (selectedStore) subject += ` - ${selectedStore}`;
  if (verificationDate) subject += ` - ${verificationDate}`;
  let body = '';
  if (personName) {
    body += `V√©rification effectu√©e par ${personName}`;
    if (verificationDate) body += ` le ${verificationDate}`;
    body += '\n\n';
  }
  body += `${completeText}\n\n`;
  checkItems.forEach((item) => {
    const response = userResponses[item.id];
    const statusText = response
      ? response.status === STATUS.DONE
        ? 'Conforme'
        : 'Non conforme'
      : 'Non v√©rifi√©';
    body += `- ${item.title} : ${statusText}`;
    if (response && response.comment) {
      body += ` (Commentaire¬†: ${response.comment})`;
    }
    body += '\n';
  });
  body += '\n';
  body += 'Cordialement,';
  const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
  // Ouvre le lien mailto pour composer l'email
  window.location.href = mailtoLink;
}

// ------------------ Initialisation ------------------ //
// Affiche le formulaire initial par d√©faut
renderPreCheck();